// vite.config.ts
import { defineConfig } from "file:///F:/endFieldMusicPlayer/MonsterSirenDesktop/node_modules/.pnpm/vite@4.4.4_@types+node@20.4.5/node_modules/vite/dist/node/index.js";
import react from "file:///F:/endFieldMusicPlayer/MonsterSirenDesktop/node_modules/.pnpm/@vitejs+plugin-react@4.0.3_vite@4.4.4/node_modules/@vitejs/plugin-react/dist/index.mjs";
import basicSsl from "file:///F:/endFieldMusicPlayer/MonsterSirenDesktop/node_modules/.pnpm/registry.npmmirror.com+@vitejs+plugin-basic-ssl@1.0.1_vite@4.4.4/node_modules/@vitejs/plugin-basic-ssl/dist/index.mjs";

// src/vite_plugin/website-inject/createServer.ts
import Server from "file:///F:/endFieldMusicPlayer/MonsterSirenDesktop/node_modules/.pnpm/registry.npmmirror.com+http-proxy@1.18.1/node_modules/http-proxy/index.js";
import modifyResponse from "file:///F:/endFieldMusicPlayer/MonsterSirenDesktop/node_modules/.pnpm/registry.npmmirror.com+http-proxy-response-rewrite@0.0.1/node_modules/http-proxy-response-rewrite/index.js";
import zlib from "zlib";
var cdnOptions = {
  target: "https://web.hycdn.cn",
  // rewrite: (path) => path.replace(/^\/cdn_proxy/, ""),
  changeOrigin: true,
  headers: {
    "referer": "https://monster-siren.hypergryph.com"
  }
};
var cdnProxy = Server.createProxyServer(cdnOptions);
cdnProxy.on("proxyRes", (proxyRes, req, res) => {
  if (req.url.includes(".js") || req.url.includes(".css")) {
    modifyResponse(res, "gzip", function(body) {
      const str = body.replaceAll("web.hycdn.cn", "localhost:11451").replaceAll("https", "http").replaceAll("/api/", "http://localhost:11452/").replace("return function(n){if", "return function(n){console.log(n);if").replace("this.store=e,", "this.store=e,window.store=e,");
      res.setHeader("Access-Control-Allow-Origin", "*");
      res.setHeader("Content-Length", Buffer.byteLength(str));
      return str;
    });
  }
});
cdnProxy.listen(11451);
var apiOptions = {
  target: "https://monster-siren.hypergryph.com/api",
  changeOrigin: true,
  headers: {
    "referer": "https://monster-siren.hypergryph.com"
  }
};
var apiProxy = Server.createProxyServer(apiOptions);
apiProxy.on("proxyRes", (proxyRes, req, res) => {
  console.log(req.url);
  res.setHeader("Access-Control-Allow-Origin", "*");
  if (proxyRes.headers["content-encoding"]) {
    let _write = res.write;
    let _end = res.end;
    let chunks = [];
    res.write = function(data, cb) {
      chunks.push(data);
    };
    res.end = function() {
      const compressedBuffer = Buffer.concat(chunks);
      zlib.brotliDecompress(compressedBuffer, function(err, decompressedBuffer) {
        if (!err) {
          let body = decompressedBuffer.toString();
          body = body.replaceAll("web.hycdn.cn", "localhost:11451").replaceAll("https", "http");
          res.setHeader("Content-Encoding", proxyRes.headers["content-encoding"]);
          _write.call(res, zlib.brotliCompressSync(body));
          _end.call(res);
        } else {
          console.error(err);
        }
      });
    };
  }
});
apiProxy.listen(11452);

// src/vite_plugin/website-inject.ts
var CDN_PATH = "web.hycdn.cn";
function replaceStr(str, oldStr, newStr) {
  return str.replaceAll(new RegExp(oldStr, "g"), newStr).replaceAll("https", "http");
}
function Plugin() {
  return {
    name: "website-inject",
    async transformIndexHtml(html, ctx) {
      return replaceStr(await fetch("https://monster-siren.hypergryph.com/index.html").then((res) => res.text()), CDN_PATH, "localhost:11451") + html;
    }
  };
}
var website_inject_default = Plugin;

// vite.config.ts
var vite_config_default = defineConfig(async () => ({
  plugins: [react(), basicSsl(), website_inject_default()],
  // root: "https://monster-siren.hypergryph.com/index.html",
  // base: "https://monster-siren.hypergryph.com",
  // Vite options tailored for Tauri development and only applied in `tauri dev` or `tauri build`
  // prevent vite from obscuring rust errors
  clearScreen: false,
  // tauri expects a fixed port, fail if that port is not available
  server: {
    port: 8e3,
    strictPort: true,
    https: true,
    proxy: {
      "/cdn_proxy": {
        target: "https://web.hycdn.cn",
        rewrite: (path) => path.replace(/^\/cdn_proxy/, ""),
        changeOrigin: true,
        headers: {
          "referer": "https://monster-siren.hypergryph.com"
        }
      }
    }
  },
  resolve: {
    alias: {
      "@": "/src"
    }
  },
  // to make use of `TAURI_DEBUG` and other env variables
  // https://tauri.studio/v1/api/config#buildconfig.beforedevcommand
  envPrefix: ["VITE_", "TAURI_"],
  build: {
    // Tauri supports es2021
    target: process.env.TAURI_PLATFORM == "windows" ? "chrome105" : "safari13",
    // don't minify for debug builds
    minify: !process.env.TAURI_DEBUG ? "esbuild" : false,
    // produce sourcemaps for debug builds
    sourcemap: !!process.env.TAURI_DEBUG
  }
}));
export {
  vite_config_default as default
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsidml0ZS5jb25maWcudHMiLCAic3JjL3ZpdGVfcGx1Z2luL3dlYnNpdGUtaW5qZWN0L2NyZWF0ZVNlcnZlci50cyIsICJzcmMvdml0ZV9wbHVnaW4vd2Vic2l0ZS1pbmplY3QudHMiXSwKICAic291cmNlc0NvbnRlbnQiOiBbImNvbnN0IF9fdml0ZV9pbmplY3RlZF9vcmlnaW5hbF9kaXJuYW1lID0gXCJGOlxcXFxlbmRGaWVsZE11c2ljUGxheWVyXFxcXE1vbnN0ZXJTaXJlbkRlc2t0b3BcIjtjb25zdCBfX3ZpdGVfaW5qZWN0ZWRfb3JpZ2luYWxfZmlsZW5hbWUgPSBcIkY6XFxcXGVuZEZpZWxkTXVzaWNQbGF5ZXJcXFxcTW9uc3RlclNpcmVuRGVza3RvcFxcXFx2aXRlLmNvbmZpZy50c1wiO2NvbnN0IF9fdml0ZV9pbmplY3RlZF9vcmlnaW5hbF9pbXBvcnRfbWV0YV91cmwgPSBcImZpbGU6Ly8vRjovZW5kRmllbGRNdXNpY1BsYXllci9Nb25zdGVyU2lyZW5EZXNrdG9wL3ZpdGUuY29uZmlnLnRzXCI7aW1wb3J0IHsgZGVmaW5lQ29uZmlnIH0gZnJvbSBcInZpdGVcIjtcclxuaW1wb3J0IHJlYWN0IGZyb20gXCJAdml0ZWpzL3BsdWdpbi1yZWFjdFwiO1xyXG5pbXBvcnQgdGF1cmlIbXIgZnJvbSAnLi9zcmMvdml0ZV9wbHVnaW4vdGF1cmktaG1yJ1xyXG5pbXBvcnQgYmFzaWNTc2wgZnJvbSAnQHZpdGVqcy9wbHVnaW4tYmFzaWMtc3NsJ1xyXG5pbXBvcnQgd2Vic2l0ZUluamVjdCBmcm9tICcuL3NyYy92aXRlX3BsdWdpbi93ZWJzaXRlLWluamVjdCdcclxuXHJcbi8vIGh0dHBzOi8vdml0ZWpzLmRldi9jb25maWcvXHJcbmV4cG9ydCBkZWZhdWx0IGRlZmluZUNvbmZpZyhhc3luYyAoKSA9PiAoe1xyXG4gIHBsdWdpbnM6IFtyZWFjdCgpLCBiYXNpY1NzbCgpLCB3ZWJzaXRlSW5qZWN0KCldLFxyXG4gIC8vIHJvb3Q6IFwiaHR0cHM6Ly9tb25zdGVyLXNpcmVuLmh5cGVyZ3J5cGguY29tL2luZGV4Lmh0bWxcIixcclxuICAvLyBiYXNlOiBcImh0dHBzOi8vbW9uc3Rlci1zaXJlbi5oeXBlcmdyeXBoLmNvbVwiLFxyXG5cclxuICAvLyBWaXRlIG9wdGlvbnMgdGFpbG9yZWQgZm9yIFRhdXJpIGRldmVsb3BtZW50IGFuZCBvbmx5IGFwcGxpZWQgaW4gYHRhdXJpIGRldmAgb3IgYHRhdXJpIGJ1aWxkYFxyXG4gIC8vIHByZXZlbnQgdml0ZSBmcm9tIG9ic2N1cmluZyBydXN0IGVycm9yc1xyXG4gIGNsZWFyU2NyZWVuOiBmYWxzZSxcclxuICAvLyB0YXVyaSBleHBlY3RzIGEgZml4ZWQgcG9ydCwgZmFpbCBpZiB0aGF0IHBvcnQgaXMgbm90IGF2YWlsYWJsZVxyXG4gIHNlcnZlcjoge1xyXG4gICAgcG9ydDogODAwMCxcclxuICAgIHN0cmljdFBvcnQ6IHRydWUsXHJcbiAgICBodHRwczogdHJ1ZSxcclxuICAgIHByb3h5OiB7XHJcbiAgICAgIFwiL2Nkbl9wcm94eVwiOiB7XHJcbiAgICAgICAgdGFyZ2V0OiBcImh0dHBzOi8vd2ViLmh5Y2RuLmNuXCIsXHJcbiAgICAgICAgcmV3cml0ZTogKHBhdGgpID0+IHBhdGgucmVwbGFjZSgvXlxcL2Nkbl9wcm94eS8sIFwiXCIpLFxyXG4gICAgICAgIGNoYW5nZU9yaWdpbjogdHJ1ZSxcclxuICAgICAgICBoZWFkZXJzOiB7XHJcbiAgICAgICAgICBcInJlZmVyZXJcIjogXCJodHRwczovL21vbnN0ZXItc2lyZW4uaHlwZXJncnlwaC5jb21cIixcclxuICAgICAgICB9LFxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfSxcclxuICByZXNvbHZlOiB7XHJcbiAgICBhbGlhczoge1xyXG4gICAgICBcIkBcIjogXCIvc3JjXCIsXHJcbiAgICB9LFxyXG4gIH0sXHJcbiAgLy8gdG8gbWFrZSB1c2Ugb2YgYFRBVVJJX0RFQlVHYCBhbmQgb3RoZXIgZW52IHZhcmlhYmxlc1xyXG4gIC8vIGh0dHBzOi8vdGF1cmkuc3R1ZGlvL3YxL2FwaS9jb25maWcjYnVpbGRjb25maWcuYmVmb3JlZGV2Y29tbWFuZFxyXG4gIGVudlByZWZpeDogW1wiVklURV9cIiwgXCJUQVVSSV9cIl0sXHJcbiAgYnVpbGQ6IHtcclxuICAgIC8vIFRhdXJpIHN1cHBvcnRzIGVzMjAyMVxyXG4gICAgdGFyZ2V0OiBwcm9jZXNzLmVudi5UQVVSSV9QTEFURk9STSA9PSBcIndpbmRvd3NcIiA/IFwiY2hyb21lMTA1XCIgOiBcInNhZmFyaTEzXCIsXHJcbiAgICAvLyBkb24ndCBtaW5pZnkgZm9yIGRlYnVnIGJ1aWxkc1xyXG4gICAgbWluaWZ5OiAhcHJvY2Vzcy5lbnYuVEFVUklfREVCVUcgPyBcImVzYnVpbGRcIiA6IGZhbHNlLFxyXG4gICAgLy8gcHJvZHVjZSBzb3VyY2VtYXBzIGZvciBkZWJ1ZyBidWlsZHNcclxuICAgIHNvdXJjZW1hcDogISFwcm9jZXNzLmVudi5UQVVSSV9ERUJVRyxcclxuICB9LFxyXG59KSk7XHJcbiIsICJjb25zdCBfX3ZpdGVfaW5qZWN0ZWRfb3JpZ2luYWxfZGlybmFtZSA9IFwiRjpcXFxcZW5kRmllbGRNdXNpY1BsYXllclxcXFxNb25zdGVyU2lyZW5EZXNrdG9wXFxcXHNyY1xcXFx2aXRlX3BsdWdpblxcXFx3ZWJzaXRlLWluamVjdFwiO2NvbnN0IF9fdml0ZV9pbmplY3RlZF9vcmlnaW5hbF9maWxlbmFtZSA9IFwiRjpcXFxcZW5kRmllbGRNdXNpY1BsYXllclxcXFxNb25zdGVyU2lyZW5EZXNrdG9wXFxcXHNyY1xcXFx2aXRlX3BsdWdpblxcXFx3ZWJzaXRlLWluamVjdFxcXFxjcmVhdGVTZXJ2ZXIudHNcIjtjb25zdCBfX3ZpdGVfaW5qZWN0ZWRfb3JpZ2luYWxfaW1wb3J0X21ldGFfdXJsID0gXCJmaWxlOi8vL0Y6L2VuZEZpZWxkTXVzaWNQbGF5ZXIvTW9uc3RlclNpcmVuRGVza3RvcC9zcmMvdml0ZV9wbHVnaW4vd2Vic2l0ZS1pbmplY3QvY3JlYXRlU2VydmVyLnRzXCI7aW1wb3J0IHsgd3JpdGVGaWxlU3luYyB9IGZyb20gJ2ZzJ1xuaW1wb3J0IFNlcnZlciBmcm9tICdodHRwLXByb3h5J1xuaW1wb3J0IG1vZGlmeVJlc3BvbnNlIGZyb20gJ2h0dHAtcHJveHktcmVzcG9uc2UtcmV3cml0ZSdcbmltcG9ydCB6bGliIGZyb20gJ3psaWInXG4vLyBpbXBvcnQgYnJNb2RpZnlSZXNwb25zZSBmcm9tICcuL21vZGlmeVJlc3BvbnNlL2JyJ1xuXG5jb25zdCBjZG5PcHRpb25zID0ge1xuICB0YXJnZXQ6IFwiaHR0cHM6Ly93ZWIuaHljZG4uY25cIixcbiAgLy8gcmV3cml0ZTogKHBhdGgpID0+IHBhdGgucmVwbGFjZSgvXlxcL2Nkbl9wcm94eS8sIFwiXCIpLFxuICBjaGFuZ2VPcmlnaW46IHRydWUsXG4gIGhlYWRlcnM6IHtcbiAgICBcInJlZmVyZXJcIjogXCJodHRwczovL21vbnN0ZXItc2lyZW4uaHlwZXJncnlwaC5jb21cIixcbiAgfVxufSBhcyBTZXJ2ZXIuU2VydmVyT3B0aW9uc1xuY29uc3QgY2RuUHJveHkgPSBTZXJ2ZXIuY3JlYXRlUHJveHlTZXJ2ZXIoY2RuT3B0aW9ucylcbmNkblByb3h5Lm9uKFwicHJveHlSZXNcIiwgKHByb3h5UmVzLCByZXEsIHJlcykgPT4ge1xuICBpZiAoKHJlcS51cmwuaW5jbHVkZXMoXCIuanNcIikgfHwgcmVxLnVybC5pbmNsdWRlcyhcIi5jc3NcIikpKSB7XG4gICAgbW9kaWZ5UmVzcG9uc2UocmVzLCBcImd6aXBcIiwgZnVuY3Rpb24gKGJvZHkpIHtcbiAgICAgIGNvbnN0IHN0ciA9IGJvZHkucmVwbGFjZUFsbChcIndlYi5oeWNkbi5jblwiLCBcImxvY2FsaG9zdDoxMTQ1MVwiKVxuICAgICAgICAucmVwbGFjZUFsbChcImh0dHBzXCIsIFwiaHR0cFwiKVxuICAgICAgICAucmVwbGFjZUFsbChcIi9hcGkvXCIsIFwiaHR0cDovL2xvY2FsaG9zdDoxMTQ1Mi9cIilcbiAgICAgICAgLnJlcGxhY2UoXCJyZXR1cm4gZnVuY3Rpb24obil7aWZcIiwgXCJyZXR1cm4gZnVuY3Rpb24obil7Y29uc29sZS5sb2cobik7aWZcIilcbiAgICAgICAgLy8gLnJlcGxhY2VBbGwoYHJldHVybiBlLl9fUkVRVUVTVF9IT1NUX198fFwiXCJgLCBgY29uc29sZS5sb2coZS5fX1JFUVVFU1RfSE9TVF9fKTtyZXR1cm4gZS5fX1JFUVVFU1RfSE9TVF9ffHxcIlwiYClcbiAgICAgICAgLy8gLnJlcGxhY2VBbGwoXCJjYW5Sb3V0ZTohMVwiLCBcImNhblJvdXRlOiEwXCIpXG4gICAgICAgIC8vIHByb3ZpZGUgZHZhIHN0b3JlIHRvIHdpbmRvd1xuICAgICAgICAucmVwbGFjZShcInRoaXMuc3RvcmU9ZSxcIiwgXCJ0aGlzLnN0b3JlPWUsd2luZG93LnN0b3JlPWUsXCIpXG5cbiAgICAgIHJlcy5zZXRIZWFkZXIoXCJBY2Nlc3MtQ29udHJvbC1BbGxvdy1PcmlnaW5cIiwgXCIqXCIpXG4gICAgICByZXMuc2V0SGVhZGVyKFwiQ29udGVudC1MZW5ndGhcIiwgQnVmZmVyLmJ5dGVMZW5ndGgoc3RyKSlcbiAgICAgIHJldHVybiBzdHJcbiAgICB9KVxuICB9XG59KVxuY2RuUHJveHkubGlzdGVuKDExNDUxKVxuXG5jb25zdCBhcGlPcHRpb25zID0ge1xuICB0YXJnZXQ6IFwiaHR0cHM6Ly9tb25zdGVyLXNpcmVuLmh5cGVyZ3J5cGguY29tL2FwaVwiLFxuICBjaGFuZ2VPcmlnaW46IHRydWUsXG4gIGhlYWRlcnM6IHtcbiAgICBcInJlZmVyZXJcIjogXCJodHRwczovL21vbnN0ZXItc2lyZW4uaHlwZXJncnlwaC5jb21cIixcbiAgfVxufSBhcyBTZXJ2ZXIuU2VydmVyT3B0aW9uc1xuY29uc3QgYXBpUHJveHkgPSBTZXJ2ZXIuY3JlYXRlUHJveHlTZXJ2ZXIoYXBpT3B0aW9ucylcbmFwaVByb3h5Lm9uKFwicHJveHlSZXNcIiwgKHByb3h5UmVzLCByZXEsIHJlcykgPT4ge1xuICBjb25zb2xlLmxvZyhyZXEudXJsKTtcbiAgcmVzLnNldEhlYWRlcihcIkFjY2Vzcy1Db250cm9sLUFsbG93LU9yaWdpblwiLCBcIipcIilcbiAgaWYgKHByb3h5UmVzLmhlYWRlcnNbJ2NvbnRlbnQtZW5jb2RpbmcnXSkge1xuICAgIGxldCBfd3JpdGUgPSByZXMud3JpdGU7XG4gICAgbGV0IF9lbmQgPSByZXMuZW5kO1xuICAgIGxldCBjaHVua3MgPSBbXVxuICAgIHJlcy53cml0ZSA9IGZ1bmN0aW9uIChkYXRhLCBjYikge1xuICAgICAgY2h1bmtzLnB1c2goZGF0YSk7XG4gICAgfVxuXG4gICAgcmVzLmVuZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIGNvbnN0IGNvbXByZXNzZWRCdWZmZXIgPSBCdWZmZXIuY29uY2F0KGNodW5rcyk7XG4gICAgICB6bGliLmJyb3RsaURlY29tcHJlc3MoY29tcHJlc3NlZEJ1ZmZlciwgZnVuY3Rpb24gKGVyciwgZGVjb21wcmVzc2VkQnVmZmVyKSB7XG4gICAgICAgIGlmICghZXJyKSB7XG4gICAgICAgICAgbGV0IGJvZHk6IHN0cmluZyB8IEJ1ZmZlciA9IGRlY29tcHJlc3NlZEJ1ZmZlci50b1N0cmluZygpO1xuXG4gICAgICAgICAgYm9keSA9IGJvZHkucmVwbGFjZUFsbChcIndlYi5oeWNkbi5jblwiLCBcImxvY2FsaG9zdDoxMTQ1MVwiKVxuICAgICAgICAgICAgLnJlcGxhY2VBbGwoXCJodHRwc1wiLCBcImh0dHBcIilcblxuICAgICAgICAgIHJlcy5zZXRIZWFkZXIoXCJDb250ZW50LUVuY29kaW5nXCIsIHByb3h5UmVzLmhlYWRlcnNbJ2NvbnRlbnQtZW5jb2RpbmcnXSlcblxuICAgICAgICAgIF93cml0ZS5jYWxsKHJlcywgemxpYi5icm90bGlDb21wcmVzc1N5bmMoYm9keSkpO1xuICAgICAgICAgIF9lbmQuY2FsbChyZXMpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9XG59KVxuYXBpUHJveHkubGlzdGVuKDExNDUyKVxuXG5leHBvcnQgZGVmYXVsdCBjZG5Qcm94eSIsICJjb25zdCBfX3ZpdGVfaW5qZWN0ZWRfb3JpZ2luYWxfZGlybmFtZSA9IFwiRjpcXFxcZW5kRmllbGRNdXNpY1BsYXllclxcXFxNb25zdGVyU2lyZW5EZXNrdG9wXFxcXHNyY1xcXFx2aXRlX3BsdWdpblwiO2NvbnN0IF9fdml0ZV9pbmplY3RlZF9vcmlnaW5hbF9maWxlbmFtZSA9IFwiRjpcXFxcZW5kRmllbGRNdXNpY1BsYXllclxcXFxNb25zdGVyU2lyZW5EZXNrdG9wXFxcXHNyY1xcXFx2aXRlX3BsdWdpblxcXFx3ZWJzaXRlLWluamVjdC50c1wiO2NvbnN0IF9fdml0ZV9pbmplY3RlZF9vcmlnaW5hbF9pbXBvcnRfbWV0YV91cmwgPSBcImZpbGU6Ly8vRjovZW5kRmllbGRNdXNpY1BsYXllci9Nb25zdGVyU2lyZW5EZXNrdG9wL3NyYy92aXRlX3BsdWdpbi93ZWJzaXRlLWluamVjdC50c1wiO2ltcG9ydCB7IFBsdWdpbk9wdGlvbiB9IGZyb20gXCJ2aXRlXCJcbmltcG9ydCBmcyBmcm9tICdmcydcbmltcG9ydCB7IHJlcXVlc3QgfSBmcm9tIFwiaHR0cHNcIlxuaW1wb3J0ICcuL3dlYnNpdGUtaW5qZWN0L2NyZWF0ZVNlcnZlcidcblxuY29uc3QgQ0ROX1BBVEggPSBcIndlYi5oeWNkbi5jblwiXG5cbmZ1bmN0aW9uIHJlcGxhY2VTdHIoc3RyOiBzdHJpbmcsIG9sZFN0cjogc3RyaW5nLCBuZXdTdHI6IHN0cmluZykge1xuICByZXR1cm4gc3RyLnJlcGxhY2VBbGwobmV3IFJlZ0V4cChvbGRTdHIsIFwiZ1wiKSwgbmV3U3RyKS5yZXBsYWNlQWxsKFwiaHR0cHNcIiwgXCJodHRwXCIpXG59XG5cbmZ1bmN0aW9uIFBsdWdpbigpIHtcbiAgcmV0dXJuIHtcbiAgICBuYW1lOiBcIndlYnNpdGUtaW5qZWN0XCIsXG4gICAgYXN5bmMgdHJhbnNmb3JtSW5kZXhIdG1sKGh0bWwsIGN0eCkge1xuICAgICAgcmV0dXJuIHJlcGxhY2VTdHIoKGF3YWl0IGZldGNoKFwiaHR0cHM6Ly9tb25zdGVyLXNpcmVuLmh5cGVyZ3J5cGguY29tL2luZGV4Lmh0bWxcIikudGhlbihyZXMgPT4gcmVzLnRleHQoKSkpLCBDRE5fUEFUSCwgXCJsb2NhbGhvc3Q6MTE0NTFcIilcbiAgICAgICAgKyBodG1sXG4gICAgICAvLyArIGA8c2NyaXB0PiR7YXdhaXQgZmV0Y2goXCJodHRwczovL3dlYi5oeWNkbi5jbi9zZXJ2aWNlLXdvcmtlci5qc1wiKS50aGVuKHJlcyA9PiByZXMudGV4dCgpKX08L3NjcmlwdD5gXG4gICAgfVxuICB9IGFzIFBsdWdpbk9wdGlvblxufVxuXG5cbmV4cG9ydCBkZWZhdWx0IFBsdWdpbiJdLAogICJtYXBwaW5ncyI6ICI7QUFBc1QsU0FBUyxvQkFBb0I7QUFDblYsT0FBTyxXQUFXO0FBRWxCLE9BQU8sY0FBYzs7O0FDRnJCLE9BQU8sWUFBWTtBQUNuQixPQUFPLG9CQUFvQjtBQUMzQixPQUFPLFVBQVU7QUFHakIsSUFBTSxhQUFhO0FBQUEsRUFDakIsUUFBUTtBQUFBO0FBQUEsRUFFUixjQUFjO0FBQUEsRUFDZCxTQUFTO0FBQUEsSUFDUCxXQUFXO0FBQUEsRUFDYjtBQUNGO0FBQ0EsSUFBTSxXQUFXLE9BQU8sa0JBQWtCLFVBQVU7QUFDcEQsU0FBUyxHQUFHLFlBQVksQ0FBQyxVQUFVLEtBQUssUUFBUTtBQUM5QyxNQUFLLElBQUksSUFBSSxTQUFTLEtBQUssS0FBSyxJQUFJLElBQUksU0FBUyxNQUFNLEdBQUk7QUFDekQsbUJBQWUsS0FBSyxRQUFRLFNBQVUsTUFBTTtBQUMxQyxZQUFNLE1BQU0sS0FBSyxXQUFXLGdCQUFnQixpQkFBaUIsRUFDMUQsV0FBVyxTQUFTLE1BQU0sRUFDMUIsV0FBVyxTQUFTLHlCQUF5QixFQUM3QyxRQUFRLHlCQUF5QixzQ0FBc0MsRUFJdkUsUUFBUSxpQkFBaUIsOEJBQThCO0FBRTFELFVBQUksVUFBVSwrQkFBK0IsR0FBRztBQUNoRCxVQUFJLFVBQVUsa0JBQWtCLE9BQU8sV0FBVyxHQUFHLENBQUM7QUFDdEQsYUFBTztBQUFBLElBQ1QsQ0FB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
